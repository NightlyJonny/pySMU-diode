#!/usr/bin/env python3

# 
# Main class used to communicate with the SMU via the serial interface
# 

import serial
from time import sleep

class SMU:
	ser = None
	dry = False

	# Initialize serial comunication with default parameters
	# port='' to test the class locally (no serial communication, commands sent to stdout, etc...)
	def __init__ (self, port, br=9600):
		self.dry = (len(port) == 0)
		if not self.dry:
			self.ser = serial.Serial(port=port,
						baudrate=br,
						bytesize=serial.EIGHTBITS,
						parity=serial.PARITY_NONE,
						stopbits=serial.STOPBITS_ONE,
						timeout=None,
						xonxoff=False,
						rtscts=False,
						dsrdtr=False
						)
		else:
			print('_Serial initialization_')

	# Send a command using the open serial communication
	# Returns False when no serial communication is active
	def sendCommand (self, cmd, terminator=b'\r'):
		# Dry run
		if self.dry:
			print(cmd)
			return True

		# Real run
		if self.ser == None:
			return False
		else:
			self.ser.write( cmd.encode('ASCII') + terminator )
			return True

	# Send a series of commands using the open serial communication
	# Returns False when no serial communication is active
	def sendCommands (self, cmds, terminator=b'\r'):
		# Dry run
		if self.dry:
			print('[\n\t', end='')
			print(',\n\t'.join(cmds))
			print(']')
			return True

		# Real run
		if self.ser == None:
			return False
		else:
			for c in cmds:
				self.sendCommand(c, terminator)
			return True

	# Send read command and get reading from the SMU
	# Returns bytes read or None in case of errors
	def getReading (self):
		res = self.sendCommand(':READ?')
		if not res:
			return None

		# Dry run
		if self.dry:
			# Actual output of a test run with a diode
			sleep(2)
			return b'0.2613588,7.400945e-08,2796.966,0.4452546,5.049074e-05,2797.053,0.4753397,0.0001009125,2797.156,0.4939037,0.0001514996,2797.258,0.5074158,0.0002019223,2797.361,0.5180905,0.0002523439,2797.465,0.5269129,0.0003027185,2797.567,0.5344654,0.0003533145,2797.671,0.5410237,0.0004037418,2797.772,0.5468322,0.0004541585,2797.875,0.5520451,0.0005045773,2797.978,0.5567867,0.000555156,2798.082,0.5611095,0.0006055799,2798.184,0.5650883,0.0006560035,2798.285,0.5687849,0.0007065182,2798.389,0.5722401,0.0007572095,2798.493,0.5754611,0.0008077115,2798.597,0.5784861,0.0008582289,2798.7,0.5813428,0.0009087407,2798.803,0.5840517,0.000959417,2798.905,0.5866119,0.001009901,2799.008,0.589048,0.001060406,2799.111,0.5913718,0.001110917,2799.215,0.5935981,0.001161596,2799.317,0.5957233,0.0012121,2799.424,0.597761,0.00126262,2799.525,0.5997183,0.001313117,2799.628,0.6016057,0.001363731,2799.73,0.6034164,0.001414156,2799.833,0.6051641,0.001464571,2799.936,0.6068527,0.001514997,2800.039,0.6084905,0.001565577,2800.144,0.6100692,0.001615994,2800.245,0.6115996,0.001666387,2800.349,0.6130862,0.001716803,2800.451,0.6145329,0.001767394,2800.553,0.6159362,0.001817804,2800.654,0.6172985,0.001868224,2800.756,0.6186255,0.00191865,2800.858,0.6199222,0.001969221,2800.963,0.6211827,0.002019675,2801.064,0.6224118,0.002070188,2801.168,0.6236117,0.002120702,2801.271,0.6247879,0.002171385,2801.377,0.6259326,0.002221895,2801.48,0.6270502,0.002272419,2801.583,0.628145,0.002322926,2801.686,0.6292167,0.002373567,2801.787,0.6302655,0.002424087,2801.889,0.6312902,0.002474595,2801.992,0.6323053,0.002525599,2802.095,0.6332933,0.002576278,2802.196,0.6342595,0.002626792,2802.3,0.6352066,0.002677308,2802.402,0.6361362,0.002727726,2802.504,0.6370509,0.002778319,2802.606,0.6379454,0.002828736,2802.708,0.6388254,0.002879156,2802.811,0.6396847,0.00292957,2802.912,0.6405382,0.002980154,2803.017,0.6413705,0.003030538,2803.119,0.6421912,0.003080958,2803.222,0.6429971,0.003131381,2803.323,0.6437917,0.00318178,2803.426,0.6445777,0.003232375,2803.528,0.6453469,0.003282795,2803.632,0.646106,0.003333204,2803.734,0.6468551,0.003383675,2803.838,0.6475945,0.003434344,2803.939,0.6483225,0.00348487,2804.042,0.6490396,0.003535379,2804.144,0.6497473,0.003585892,2804.246,0.6504451,0.003636579,2804.35,0.6511337,0.003687076,2804.453,0.6518096,0.003737556,2804.555,0.6524789,0.003788073,2804.657,0.65314,0.003838746,2804.759,0.6537911,0.003889263,2804.86,0.6544332,0.003939766,2804.964,0.65507,0.003990284,2805.068,0.6556976,0.004040949,2805.169,0.6563141,0.004091364,2805.272,0.6569249,0.004141801,2805.375,0.6575272,0.004192207,2805.479,0.6581228,0.004242793,2805.582,0.6587103,0.004293219,2805.687,0.659291,0.004343627,2805.79,0.6598642,0.004394023,2805.892,0.6604343,0.004444601,2805.993,0.6609975,0.004495025,2806.097,0.6615519,0.004545442,2806.2,0.6621007,0.004595852,2806.304,0.6626484,0.004646458,2806.406,0.6631846,0.004696857,2806.51,0.6637163,0.004747349,2806.613,0.6642409,0.004797872,2806.72,0.6647651,0.004848548,2806.822,0.66528,0.004899076,2806.925,0.6657912,0.004949594,2807.027,0.6662938,0.005000107,2807.13,0.6663229,0.005000114,2807.374,0.6658081,0.00494959,2807.46,0.665298,0.004899072,2807.565,0.6647819,0.004848549,2807.673,0.6642625,0.00479787,2807.776,0.6637406,0.004747347,2807.88,0.6632138,0.004696858,2807.982,0.6626809,0.004646457,2808.084,0.6621414,0.004595862,2808.186,0.6615982,0.004545447,2808.288,0.6610483,0.004495029,2808.39,0.6604928,0.004444597,2808.492,0.6599286,0.004394023,2808.596,0.6593593,0.004343629,2808.699,0.6587828,0.004293217,2808.801,0.658199,0.004242785,2808.902,0.6576072,0.004192208,2809.006,0.6570098,0.004141804,2809.109,0.6564038,0.004091368,2809.212,0.6557915,0.004040948,2809.315,0.6551673,0.003990283,2809.417,0.6545399,0.003939769,2809.52,0.6539023,0.003889267,2809.623,0.653258,0.003838744,2809.727,0.6526016,0.003788074,2809.829,0.6519365,0.003737555,2809.936,0.6512653,0.003687075,2810.036,0.6505846,0.003636575,2810.142,0.6498914,0.00358589,2810.243,0.6491892,0.003535374,2810.346,0.6484782,0.003484867,2810.449,0.647755,0.003434347,2810.551,0.6470202,0.003383673,2810.652,0.6462767,0.003333206,2810.756,0.6455227,0.003282795,2810.86,0.6447591,0.003232383,2810.964,0.6439797,0.003181784,2811.067,0.6431899,0.003131383,2811.17,0.6423891,0.003080961,2811.273,0.6415722,0.003030537,2811.377,0.6407449,0.002980157,2811.48,0.6398981,0.002929575,2811.584,0.6390398,0.00287916,2811.687,0.638165,0.002828739,2811.79,0.6372752,0.002778322,2811.896,0.6363651,0.002727729,2811.999,0.6354405,0.00267731,2812.101,0.6344999,0.002626803,2812.203,0.6335374,0.002576286,2812.306,0.6325542,0.002525607,2812.408,0.631543,0.002474597,2812.512,0.6305224,0.002424087,2812.615,0.629479,0.002373572,2812.718,0.6284094,0.002322929,2812.821,0.6273209,0.002272421,2812.924,0.6262066,0.002221893,2813.026,0.6250678,0.002171388,2813.13,0.6238977,0.002120706,2813.231,0.6227025,0.002070188,2813.335,0.6214802,0.002019678,2813.438,0.6202267,0.001969222,2813.541,0.6189366,0.00191865,2813.645,0.6176175,0.001868228,2813.748,0.6162621,0.0018178,2813.852,0.6148692,0.001767399,2813.955,0.6134293,0.0017168,2814.059,0.6119512,0.00166638,2814.161,0.6104318,0.001615993,2814.266,0.6088582,0.001565575,2814.368,0.6072299,0.001514998,2814.47,0.6055497,0.001464572,2814.571,0.6038115,0.001414157,2814.673,0.6020073,0.001363731,2814.776,0.6001281,0.001313121,2814.88,0.5981783,0.001262626,2814.981,0.5961467,0.001212099,2815.086,0.5940305,0.001161594,2815.189,0.5918105,0.001110919,2815.291,0.589496,0.001060405,2815.395,0.5870688,0.001009902,2815.498,0.5845165,0.0009594169,2815.6,0.5818174,0.0009087416,2815.701,0.5789717,0.0008582254,2815.806,0.5759557,0.000807713,2815.909,0.5727483,0.0007572144,2816.011,0.5693043,0.0007065256,2816.115,0.5656227,0.0006560092,2816.217,0.5616552,0.0006055823,2816.32,0.557347,0.0005551543,2816.424,0.5526199,0.0005045771,2816.527,0.5474241,0.0004541617,2816.631,0.5416332,0.000403745,2816.733,0.5350949,0.0003533164,2816.836,0.5275622,0.0003027216,2816.939,0.5187654,0.0002523515,2817.042,0.5081145,0.000201929,2817.146,0.4946339,0.0001515042,2817.25,0.4761046,0.0001009197,2817.353,0.4460715,5.049577e-05,2817.455,0.2619033,8.246286e-08,2817.557\r'

		# Real run
		if self.ser == None:
			return None
		else:
			res = self.ser.read()
			while res[-1] != 13:
				res += self.ser.read()
			return res

	# Get readings as array of float numbers
	# Returns number array or None in case of errors
	def getReadingsArray (self):
		res = self.getReading()
		if res != None:
			return [float(r) for r in res.decode('ASCII')[:-1].split(',')]
		else:
			return None

	# Close the serial connection
	# Returns nothing
	def close (self):
		# Dry run
		if self.dry:
			print('_Closing serial communication_')

		# Real run
		if self.ser != None:
			self.ser.close()
			self.ser = None